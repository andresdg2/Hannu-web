import requests
import sys
import json
from datetime import datetime, timedelta

class UrgentProductInvestigation:
    def __init__(self, base_url="https://fashion-admin-4.preview.emergentagent.com"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.token = None
        self.admin_username = "admin"
        self.admin_password = "admin123"
        self.investigation_results = {}

    def authenticate(self):
        """Get admin token for authenticated requests"""
        print("üîê Authenticating admin user...")
        try:
            response = requests.post(
                f"{self.api_url}/admin/login",
                json={"username": self.admin_username, "password": self.admin_password},
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get('access_token')
                print(f"‚úÖ Authentication successful")
                return True
            else:
                print(f"‚ùå Authentication failed: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Authentication error: {str(e)}")
            return False

    def get_headers(self):
        """Get headers with authentication"""
        headers = {'Content-Type': 'application/json'}
        if self.token:
            headers['Authorization'] = f'Bearer {self.token}'
        return headers

    def investigate_existing_products(self):
        """INVESTIGACI√ìN 1: Productos existentes"""
        print("\n" + "="*60)
        print("üîç INVESTIGACI√ìN 1: PRODUCTOS EXISTENTES")
        print("="*60)
        
        # Count ALL products in database
        print("\nüìä Contando TODOS los productos en la base de datos...")
        try:
            # Try with high limit to get all products
            response = requests.get(
                f"{self.api_url}/products?limit=1000",
                headers=self.get_headers(),
                timeout=15
            )
            
            if response.status_code == 200:
                products = response.json()
                total_count = len(products)
                print(f"‚úÖ TOTAL DE PRODUCTOS ENCONTRADOS: {total_count}")
                self.investigation_results['total_products'] = total_count
                
                if total_count == 0:
                    print("‚ùå CR√çTICO: NO HAY PRODUCTOS EN LA BASE DE DATOS")
                    return products
                
                # List first 10 products by creation date (oldest first)
                print(f"\nüìã Listando los primeros 10 productos por fecha de creaci√≥n (m√°s antiguos primero):")
                
                # Sort by created_at (oldest first)
                products_with_dates = []
                for product in products:
                    created_at = product.get('created_at')
                    if created_at:
                        try:
                            # Parse the datetime string
                            if isinstance(created_at, str):
                                # Handle different datetime formats
                                if 'T' in created_at:
                                    dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                                else:
                                    dt = datetime.fromisoformat(created_at)
                            else:
                                dt = created_at
                            products_with_dates.append((product, dt))
                        except:
                            # If parsing fails, use current time
                            products_with_dates.append((product, datetime.now()))
                    else:
                        # If no created_at, use current time
                        products_with_dates.append((product, datetime.now()))
                
                # Sort by date (oldest first)
                products_with_dates.sort(key=lambda x: x[1])
                
                print(f"   {'#':<3} {'Nombre':<30} {'Categor√≠a':<12} {'Fecha Creaci√≥n':<20}")
                print(f"   {'-'*3} {'-'*30} {'-'*12} {'-'*20}")
                
                for i, (product, dt) in enumerate(products_with_dates[:10]):
                    name = product.get('name', 'Sin nombre')[:28]
                    category = product.get('category', 'Sin cat')[:10]
                    date_str = dt.strftime('%Y-%m-%d %H:%M') if dt else 'Sin fecha'
                    print(f"   {i+1:<3} {name:<30} {category:<12} {date_str:<20}")
                
                # Check for products with dates before today
                today = datetime.now().date()
                products_before_today = []
                
                for product, dt in products_with_dates:
                    if dt.date() < today:
                        products_before_today.append((product, dt))
                
                print(f"\nüìÖ Productos con fechas anteriores a hoy ({today}):")
                print(f"   ENCONTRADOS: {len(products_before_today)} productos")
                
                if len(products_before_today) > 0:
                    print(f"   Ejemplos de productos antiguos:")
                    for i, (product, dt) in enumerate(products_before_today[:5]):
                        name = product.get('name', 'Sin nombre')[:25]
                        date_str = dt.strftime('%Y-%m-%d')
                        print(f"   ‚Ä¢ {name} (creado: {date_str})")
                
                # Check for specific product names mentioned by user
                print(f"\nüîç Buscando productos espec√≠ficos mencionados por el usuario:")
                search_terms = ['vestido', 'blusa', 'enterizo', 'conjunto', 'falda', 'pantal√≥n']
                
                for term in search_terms:
                    matching_products = [p for p in products if term.lower() in p.get('name', '').lower() or term.lower() in p.get('category', '').lower()]
                    print(f"   ‚Ä¢ Productos con '{term}': {len(matching_products)}")
                    
                    if len(matching_products) > 0:
                        for product in matching_products[:3]:  # Show first 3 examples
                            print(f"     - {product.get('name', 'Sin nombre')}")
                
                return products
                
            else:
                print(f"‚ùå Error al obtener productos: {response.status_code} - {response.text}")
                return []
                
        except Exception as e:
            print(f"‚ùå Error en investigaci√≥n de productos: {str(e)}")
            return []

    def investigate_deletion_problem(self, products):
        """INVESTIGACI√ìN 2: Problema de eliminaci√≥n"""
        print("\n" + "="*60)
        print("üóëÔ∏è INVESTIGACI√ìN 2: PROBLEMA DE ELIMINACI√ìN")
        print("="*60)
        
        if not products or len(products) == 0:
            print("‚ùå No hay productos para probar eliminaci√≥n")
            return False
        
        # Create a test product first
        print("\nüß™ Creando producto de prueba para probar eliminaci√≥n...")
        test_product = {
            "name": "PRODUCTO PRUEBA ELIMINACI√ìN",
            "description": "Producto temporal para probar funcionalidad de eliminaci√≥n",
            "retail_price": 50000,
            "wholesale_price": 35000,
            "category": "vestidos",
            "images": ["https://example.com/test.jpg"],
            "colors": ["Rojo"]
        }
        
        try:
            response = requests.post(
                f"{self.api_url}/products",
                json=test_product,
                headers=self.get_headers(),
                timeout=10
            )
            
            if response.status_code == 200:
                created_product = response.json()
                product_id = created_product.get('id')
                print(f"‚úÖ Producto de prueba creado con ID: {product_id}")
                
                # Now try to delete it
                print(f"\nüóëÔ∏è Probando DELETE /api/products/{product_id} con token admin...")
                
                delete_response = requests.delete(
                    f"{self.api_url}/products/{product_id}",
                    headers=self.get_headers(),
                    timeout=10
                )
                
                if delete_response.status_code == 200:
                    print(f"‚úÖ Eliminaci√≥n exitosa: {delete_response.json()}")
                    
                    # Verify product was actually deleted
                    verify_response = requests.get(
                        f"{self.api_url}/products/{product_id}",
                        headers=self.get_headers(),
                        timeout=10
                    )
                    
                    if verify_response.status_code == 404:
                        print(f"‚úÖ Verificaci√≥n: Producto efectivamente eliminado de la base de datos")
                        return True
                    else:
                        print(f"‚ùå PROBLEMA: Producto a√∫n existe despu√©s de eliminaci√≥n")
                        return False
                        
                else:
                    print(f"‚ùå Error en eliminaci√≥n: {delete_response.status_code} - {delete_response.text}")
                    return False
                    
            else:
                print(f"‚ùå No se pudo crear producto de prueba: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en prueba de eliminaci√≥n: {str(e)}")
            return False

    def investigate_edit_problem(self, products):
        """INVESTIGACI√ìN 3: Problema de edici√≥n"""
        print("\n" + "="*60)
        print("‚úèÔ∏è INVESTIGACI√ìN 3: PROBLEMA DE EDICI√ìN")
        print("="*60)
        
        if not products or len(products) == 0:
            print("‚ùå No hay productos para probar edici√≥n")
            return False
        
        # Create a test product first
        print("\nüß™ Creando producto de prueba para probar edici√≥n...")
        test_product = {
            "name": "PRODUCTO PRUEBA EDICI√ìN",
            "description": "Producto temporal para probar funcionalidad de edici√≥n",
            "retail_price": 60000,
            "wholesale_price": 42000,
            "category": "blusas",
            "images": ["https://example.com/original.jpg", "https://example.com/original2.jpg"],
            "colors": ["Azul", "Verde"],
            "composition": "100% Algod√≥n",
            "sizes": ["S", "M", "L"]
        }
        
        try:
            response = requests.post(
                f"{self.api_url}/products",
                json=test_product,
                headers=self.get_headers(),
                timeout=10
            )
            
            if response.status_code == 200:
                created_product = response.json()
                product_id = created_product.get('id')
                print(f"‚úÖ Producto de prueba creado con ID: {product_id}")
                
                # Now try to edit it with comprehensive updates
                print(f"\n‚úèÔ∏è Probando PUT /api/products/{product_id} con actualizaci√≥n completa...")
                
                update_data = {
                    "name": "PRODUCTO EDITADO - ACTUALIZADO",
                    "description": "Descripci√≥n actualizada despu√©s de edici√≥n",
                    "retail_price": 75000,
                    "wholesale_price": 52500,
                    "images": ["https://example.com/updated1.jpg", "https://example.com/updated2.jpg", "https://example.com/updated3.jpg"],
                    "colors": ["Rojo", "Negro", "Blanco"],
                    "composition": "95% Algod√≥n, 5% Elastano",
                    "sizes": ["XS", "S", "M", "L", "XL"]
                }
                
                edit_response = requests.put(
                    f"{self.api_url}/products/{product_id}",
                    json=update_data,
                    headers=self.get_headers(),
                    timeout=10
                )
                
                if edit_response.status_code == 200:
                    updated_product = edit_response.json()
                    print(f"‚úÖ Edici√≥n exitosa")
                    
                    # Verify all fields were updated correctly
                    print(f"\nüîç Verificando que todos los campos se mantuvieron:")
                    
                    checks = [
                        ("Nombre", updated_product.get('name'), update_data['name']),
                        ("Descripci√≥n", updated_product.get('description'), update_data['description']),
                        ("Precio retail", updated_product.get('retail_price'), update_data['retail_price']),
                        ("Precio mayorista", updated_product.get('wholesale_price'), update_data['wholesale_price']),
                        ("Im√°genes", updated_product.get('images'), update_data['images']),
                        ("Colores", updated_product.get('colors'), update_data['colors']),
                        ("Composici√≥n", updated_product.get('composition'), update_data['composition']),
                        ("Tallas", updated_product.get('sizes'), update_data['sizes'])
                    ]
                    
                    all_correct = True
                    for field_name, actual, expected in checks:
                        if actual == expected:
                            print(f"   ‚úÖ {field_name}: Correcto")
                        else:
                            print(f"   ‚ùå {field_name}: Esperado {expected}, obtenido {actual}")
                            all_correct = False
                    
                    # Clean up test product
                    requests.delete(f"{self.api_url}/products/{product_id}", headers=self.get_headers())
                    
                    return all_correct
                    
                else:
                    print(f"‚ùå Error en edici√≥n: {edit_response.status_code} - {edit_response.text}")
                    # Clean up test product
                    requests.delete(f"{self.api_url}/products/{product_id}", headers=self.get_headers())
                    return False
                    
            else:
                print(f"‚ùå No se pudo crear producto de prueba: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en prueba de edici√≥n: {str(e)}")
            return False

    def investigate_database_verification(self):
        """INVESTIGACI√ìN 4: Verificaci√≥n de base de datos"""
        print("\n" + "="*60)
        print("üóÑÔ∏è INVESTIGACI√ìN 4: VERIFICACI√ìN DE BASE DE DATOS")
        print("="*60)
        
        # Test with different limits and parameters
        print("\nüîç Probando GET /api/products con diferentes par√°metros...")
        
        test_cases = [
            ("L√≠mite 1000", "products?limit=1000"),
            ("Sin l√≠mite", "products"),
            ("Categor√≠a vestidos", "products?category=vestidos"),
            ("Categor√≠a blusas", "products?category=blusas"),
            ("Categor√≠a enterizos", "products?category=enterizos"),
            ("Categor√≠a conjuntos", "products?category=conjuntos"),
            ("B√∫squeda 'vestido'", "catalog/search?query=vestido"),
            ("B√∫squeda 'blusa'", "catalog/search?query=blusa")
        ]
        
        results = {}
        
        for test_name, endpoint in test_cases:
            try:
                response = requests.get(
                    f"{self.api_url}/{endpoint}",
                    headers=self.get_headers(),
                    timeout=15
                )
                
                if response.status_code == 200:
                    data = response.json()
                    count = len(data) if isinstance(data, list) else 0
                    results[test_name] = count
                    print(f"   ‚úÖ {test_name}: {count} productos")
                    
                    # Show sample product names if any found
                    if count > 0 and isinstance(data, list):
                        sample_names = [p.get('name', 'Sin nombre') for p in data[:3]]
                        print(f"      Ejemplos: {', '.join(sample_names)}")
                        
                else:
                    results[test_name] = f"Error {response.status_code}"
                    print(f"   ‚ùå {test_name}: Error {response.status_code}")
                    
            except Exception as e:
                results[test_name] = f"Error: {str(e)}"
                print(f"   ‚ùå {test_name}: Error {str(e)}")
        
        # Check for products with different states or hidden products
        print(f"\nüîç Verificando productos con diferentes estados...")
        
        try:
            # Get catalog stats for comprehensive view
            stats_response = requests.get(
                f"{self.api_url}/catalog/stats",
                headers=self.get_headers(),
                timeout=10
            )
            
            if stats_response.status_code == 200:
                stats = stats_response.json()
                print(f"   üìä Estad√≠sticas del cat√°logo:")
                print(f"      Total productos: {stats.get('total_products', 0)}")
                print(f"      Por categor√≠a: {stats.get('products_by_category', {})}")
                print(f"      Productos con poco stock: {len(stats.get('low_stock_products', []))}")
                
                self.investigation_results['catalog_stats'] = stats
                
            else:
                print(f"   ‚ùå No se pudieron obtener estad√≠sticas: {stats_response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Error obteniendo estad√≠sticas: {str(e)}")
        
        return results

    def generate_investigation_report(self):
        """Generate comprehensive investigation report"""
        print("\n" + "="*80)
        print("üìã REPORTE FINAL DE INVESTIGACI√ìN URGENTE")
        print("="*80)
        
        print(f"\nüïê Fecha y hora de investigaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåê URL investigada: {self.base_url}")
        print(f"üë§ Credenciales utilizadas: {self.admin_username}/admin123")
        
        # Summary of findings
        total_products = self.investigation_results.get('total_products', 0)
        
        print(f"\nüìä RESUMEN EJECUTIVO:")
        print(f"   ‚Ä¢ Total de productos encontrados: {total_products}")
        
        if total_products == 0:
            print(f"   ‚ùå CR√çTICO: NO SE ENCONTRARON PRODUCTOS EN LA BASE DE DATOS")
            print(f"   ‚ùå ESTO CONFIRMA QUE LOS 300+ PRODUCTOS REPORTADOS HAN DESAPARECIDO")
        elif total_products < 50:
            print(f"   ‚ö†Ô∏è  PROBLEMA CONFIRMADO: Solo {total_products} productos encontrados")
            print(f"   ‚ö†Ô∏è  Esto es significativamente menor a los 300+ reportados por el usuario")
        else:
            print(f"   ‚úÖ Se encontraron {total_products} productos en la base de datos")
        
        # Recommendations
        print(f"\nüéØ RECOMENDACIONES URGENTES:")
        
        if total_products == 0:
            print(f"   1. ‚ùå CR√çTICO: Verificar respaldo de base de datos inmediatamente")
            print(f"   2. ‚ùå CR√çTICO: Revisar logs del servidor para identificar cu√°ndo se perdieron los datos")
            print(f"   3. ‚ùå CR√çTICO: Contactar al administrador de base de datos")
            print(f"   4. ‚ùå CR√çTICO: Implementar recuperaci√≥n de datos desde respaldo m√°s reciente")
        elif total_products < 100:
            print(f"   1. ‚ö†Ô∏è  Verificar si hay filtros o l√≠mites ocultos en las consultas")
            print(f"   2. ‚ö†Ô∏è  Revisar logs de eliminaci√≥n masiva de productos")
            print(f"   3. ‚ö†Ô∏è  Verificar integridad de la base de datos")
            print(f"   4. ‚ö†Ô∏è  Considerar recuperaci√≥n parcial desde respaldo")
        else:
            print(f"   1. ‚úÖ Verificar con el usuario si est√° viendo la vista correcta del cat√°logo")
            print(f"   2. ‚úÖ Revisar filtros de frontend que puedan estar ocultando productos")
            print(f"   3. ‚úÖ Verificar paginaci√≥n y l√≠mites en la interfaz de usuario")
        
        print(f"\nüö® ESTADO CR√çTICO DEL SISTEMA:")
        if total_products == 0:
            print(f"   üî¥ ROJO - Sistema no funcional, p√©rdida total de datos")
        elif total_products < 50:
            print(f"   üü° AMARILLO - Sistema parcialmente funcional, p√©rdida significativa de datos")
        else:
            print(f"   üü¢ VERDE - Sistema funcional, posible problema de visualizaci√≥n")

def main():
    print("üö® INVESTIGACI√ìN URGENTE - PRODUCTOS PERDIDOS")
    print("="*80)
    print("Usuario reporta que 300+ productos originales han desaparecido del cat√°logo")
    print("Iniciando investigaci√≥n exhaustiva...")
    
    investigator = UrgentProductInvestigation()
    
    # Authenticate first
    if not investigator.authenticate():
        print("‚ùå CR√çTICO: No se pudo autenticar. Investigaci√≥n abortada.")
        return 1
    
    # Run investigations
    print("\nüîç Ejecutando 4 investigaciones cr√≠ticas...")
    
    # Investigation 1: Existing products
    products = investigator.investigate_existing_products()
    
    # Investigation 2: Deletion problem
    investigator.investigate_deletion_problem(products)
    
    # Investigation 3: Edit problem  
    investigator.investigate_edit_problem(products)
    
    # Investigation 4: Database verification
    investigator.investigate_database_verification()
    
    # Generate final report
    investigator.generate_investigation_report()
    
    print(f"\n‚úÖ Investigaci√≥n completada. Revisar reporte detallado arriba.")
    return 0

if __name__ == "__main__":
    sys.exit(main())